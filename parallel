{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9098,"status":"ok","timestamp":1715338139829,"user":{"displayName":"Om Singh","userId":"02223458389634913969"},"user_tz":-330},"id":"27ubjCubZHHj","outputId":"a434b7f2-8ca8-488e-8cd8-7c880448f826"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ortools in /usr/local/lib/python3.10/dist-packages (9.10.4067)\n","Requirement already satisfied: absl-py>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (2.1.0)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.10/dist-packages (from ortools) (1.25.2)\n","Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (2.0.3)\n","Requirement already satisfied: protobuf>=5.26.1 in /usr/local/lib/python3.10/dist-packages (from ortools) (5.26.1)\n","Requirement already satisfied: immutabledict>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (4.2.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2024.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->ortools) (1.16.0)\n"]}],"source":["!pip install ortools"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4085,"status":"ok","timestamp":1715338143904,"user":{"displayName":"Om Singh","userId":"02223458389634913969"},"user_tz":-330},"id":"eWjddpsnZQSm","outputId":"f4f3a752-43e1-4fb4-fdc1-c7153a4c3445"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1715338143905,"user":{"displayName":"Om Singh","userId":"02223458389634913969"},"user_tz":-330},"id":"C2rSMHR1ZNkK"},"outputs":[],"source":["def get_data():\n","    n, index_mapping, l_val, w_val, adj, anchors = 0, dict(), [], [], [], []\n","    sizes = \"/content/drive/My Drive/raman_solver/raman_solver_final/sizes.txt\"\n","    anch = \"/content/drive/My Drive/raman_solver/raman_solver_final/anchors.txt\"\n","    edges = \"/content/drive/My Drive/raman_solver/raman_solver_final/edges.txt\"\n","    with open(sizes, \"r\") as file:\n","        for line in file:\n","            obj, size = line.strip().split(\",\")\n","            if obj not in index_mapping:\n","                index_mapping[obj] = n\n","                w_val.append(int(float(size)))\n","                l_val.append(int(float(size)))\n","                n += 1\n","    with open(anch, \"r\") as file:\n","        for line in file:\n","            obj = line.strip()\n","            index = index_mapping[obj]\n","            if index not in anchors:\n","                anchors.append(index)\n","    with open(edges, \"r\") as file:\n","        for line in file:\n","            obj1, obj2 = line.strip().split(\",\")\n","            idx1, idx2 = index_mapping[obj1], index_mapping[obj2]\n","            if idx1 > idx2:\n","                idx1, idx2 = idx2, idx1\n","            if [idx1, idx2] not in adj:\n","                adj.append([idx1, idx2])\n","    return n, index_mapping, l_val, w_val, adj, anchors"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1715338143906,"user":{"displayName":"Om Singh","userId":"02223458389634913969"},"user_tz":-330},"id":"pydmrwLCZVjk"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","def generate_plot(n, final_x, final_y, l_val, w_val, index_mapping):\n","    for index in range(n):\n","        l = l_val[index]\n","        w = w_val[index]\n","        x_coords = [final_x[index], final_x[index] + l, final_x[index] + l, final_x[index], final_x[index]]\n","        y_coords = [final_y[index], final_y[index], final_y[index] + w, final_y[index] + w, final_y[index]]\n","        plt.plot(x_coords, y_coords, 'b-', linewidth=1)\n","        center_x = final_x[index] + l_val[index] / 2\n","        center_y = final_y[index] + w_val[index] / 2\n","        for name in index_mapping:\n","            if index_mapping[name] == index:\n","                break\n","        plt.text(center_x, center_y, name, ha=\"center\", va=\"center\", fontsize=5, color=\"black\")\n","\n","    plt.title(\"Layout Visualisation\")\n","    plt.savefig(\"/content/drive/My Drive/raman_solver/raman_solver_final/output_squares.png\")"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":760,"status":"ok","timestamp":1715343722978,"user":{"displayName":"Om Singh","userId":"02223458389634913969"},"user_tz":-330},"id":"SFqaJ9aTf9qn"},"outputs":[],"source":["from ortools.sat.python import cp_model\n","\n","def solve_modified(n, adj, l_actual, w_actual, anchors):\n","    # anchors, adj, l_val and w_val mist all be 0-indexed.\n","    model = cp_model.CpModel()\n","\n","    # Declaring the variables.\n","    x_val = [model.NewIntVar(0, cp_model.INT32_MAX, f\"x_val{i}\") for i in range(n)]\n","    y_val = [model.NewIntVar(0, cp_model.INT32_MAX, f\"y_val{i}\") for i in range(n)]\n","\n","    # Adding the anchor-based constraints.\n","    x_max = model.NewIntVar(0, cp_model.INT32_MAX, \"x_max\")\n","    y_max = model.NewIntVar(0, cp_model.INT32_MAX, \"y_max\")\n","    for index in range(n):\n","        model.Add(x_max >= x_val[index] + l_actual[index])\n","        model.Add(y_max >= y_val[index] + w_actual[index])\n","\n","    for index in anchors:\n","        bot = model.NewBoolVar(\"bot\")\n","        top = model.NewBoolVar(\"top\")\n","        left = model.NewBoolVar(\"left\")\n","        right = model.NewBoolVar(\"right\")\n","        model.add(y_val[index] == 0).OnlyEnforceIf(bot)\n","        model.add(x_val[index] == 0).OnlyEnforceIf(left)\n","        model.add(x_val[index] >= x_max - l_actual[index]).OnlyEnforceIf(top)\n","        model.add(y_val[index] >= y_max - w_actual[index]).OnlyEnforceIf(right)\n","        model.AddBoolOr([bot, top, left, right])\n","\n","    # Adding adjacency constraints.\n","    for i, j in adj:\n","        xji = model.NewBoolVar(\"xji\")\n","        yji = model.NewBoolVar(\"yji\")\n","        xij = model.NewBoolVar(\"xij\")\n","        yij = model.NewBoolVar(\"yij\")\n","\n","        model.add(x_val[j] == x_val[i] + l_actual[i]).OnlyEnforceIf(xji)\n","        model.add(y_val[i] <= y_val[j]).OnlyEnforceIf(xji)\n","        model.add(y_val[j] <= y_val[i] + w_actual[i]).OnlyEnforceIf(xji)\n","\n","        model.add(y_val[j] == y_val[i] + w_actual[i]).OnlyEnforceIf(yji)\n","        model.add(x_val[i] <= x_val[j]).OnlyEnforceIf(yji)\n","        model.add(x_val[j] <= x_val[i] + l_actual[i]).OnlyEnforceIf(yji)\n","\n","        model.add(x_val[i] == x_val[j] + l_actual[j]).OnlyEnforceIf(xij)\n","        model.add(y_val[j] <= y_val[i]).OnlyEnforceIf(xij)\n","        model.add(y_val[i] <= y_val[j] + w_actual[j]).OnlyEnforceIf(xij)\n","\n","        model.add(y_val[i] == y_val[j] + w_actual[j]).OnlyEnforceIf(yij)\n","        model.add(x_val[j] <= x_val[i]).OnlyEnforceIf(yij)\n","        model.add(x_val[i] <= x_val[j] + l_actual[j]).OnlyEnforceIf(yij)\n","\n","        model.AddBoolOr([xji, yji, xij, yij])\n","\n","    # Adding no-overlap constraints.\n","    for i in range(n):\n","        for j in range(i + 1, n):\n","            if [i, j] not in adj:\n","                xji = model.NewBoolVar(\"xji\")\n","                yji = model.NewBoolVar(\"yji\")\n","                xij = model.NewBoolVar(\"xij\")\n","                yij = model.NewBoolVar(\"yij\")\n","                model.add(x_val[j] >= x_val[i] + l_actual[i]).OnlyEnforceIf(xji)\n","                model.add(y_val[j] >= y_val[i] + w_actual[i]).OnlyEnforceIf(yji)\n","                model.add(x_val[i] >= x_val[j] + l_actual[j]).OnlyEnforceIf(xij)\n","                model.add(y_val[i] >= y_val[j] + w_actual[j]).OnlyEnforceIf(yij)\n","                model.AddBoolOr([xji, yji, xij, yij])\n","\n","    # Adding an objective function as well.\n","    # model.Minimize(x_max + y_max)\n","\n","    # Create a solver and solve the model.\n","    solver = cp_model.CpSolver()\n","    status = solver.solve(model)\n","\n","    final_x, final_y, final_pos = [], [], []\n","\n","    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n","        for entry in x_val:\n","            final_x.append(solver.value(entry))\n","        for entry in y_val:\n","            final_y.append(solver.value(entry))\n","    else:\n","        print(\"No solution found.\")\n","\n","    return final_x, final_y, [1] * n"]},{"cell_type":"code","source":["from ortools.sat.python import cp_model\n","\n","def solve_modified1(n, adj, l_actual, w_actual, anchors):\n","    # anchors, adj, l_val and w_val mist all be 0-indexed.\n","    model = cp_model.CpModel()\n","\n","    # Declaring the variables.\n","    x_val = [model.NewIntVar(0, cp_model.INT32_MAX, f\"x_val{i}\") for i in range(n)]\n","    y_val = [model.NewIntVar(0, cp_model.INT32_MAX, f\"y_val{i}\") for i in range(n)]\n","\n","    # Adding the anchor-based constraints.\n","    x_max = model.NewIntVar(0, cp_model.INT32_MAX, \"x_max\")\n","    y_max = model.NewIntVar(0, cp_model.INT32_MAX, \"y_max\")\n","    for index in range(n):\n","        model.Add(x_max >= x_val[index] + l_actual[index])\n","        model.Add(y_max >= y_val[index] + w_actual[index])\n","\n","    for index in anchors:\n","        bot = model.NewBoolVar(\"bot\")\n","        top = model.NewBoolVar(\"top\")\n","        left = model.NewBoolVar(\"left\")\n","        right = model.NewBoolVar(\"right\")\n","        model.add(y_val[index] == 0).OnlyEnforceIf(bot)\n","        model.add(x_val[index] == 0).OnlyEnforceIf(left)\n","        model.add(x_val[index] >= x_max - l_actual[index]).OnlyEnforceIf(top)\n","        model.add(y_val[index] >= y_max - w_actual[index]).OnlyEnforceIf(right)\n","        model.AddBoolOr([bot, top, left, right])\n","\n","    # Adding adjacency constraints.\n","    for i, j in adj:\n","        xji = model.NewBoolVar(\"xji\")\n","        yji = model.NewBoolVar(\"yji\")\n","        xij = model.NewBoolVar(\"xij\")\n","        yij = model.NewBoolVar(\"yij\")\n","\n","        model.add(x_val[j] == x_val[i] + l_actual[i]).OnlyEnforceIf(xji)\n","        model.add(y_val[i] <= y_val[j]).OnlyEnforceIf(xji)\n","        model.add(y_val[j] <= y_val[i] + w_actual[i]).OnlyEnforceIf(xji)\n","\n","        model.add(y_val[j] == y_val[i] + w_actual[i]).OnlyEnforceIf(yji)\n","        model.add(x_val[i] <= x_val[j]).OnlyEnforceIf(yji)\n","        model.add(x_val[j] <= x_val[i] + l_actual[i]).OnlyEnforceIf(yji)\n","\n","        model.add(x_val[i] == x_val[j] + l_actual[j]).OnlyEnforceIf(xij)\n","        model.add(y_val[j] <= y_val[i]).OnlyEnforceIf(xij)\n","        model.add(y_val[i] == y_val[j] + w_actual[j]).OnlyEnforceIf(xij)\n","\n","        model.add(y_val[i] == y_val[j] + w_actual[j]).OnlyEnforceIf(yij)\n","        model.add(x_val[j] <= x_val[i]).OnlyEnforceIf(yij)\n","        model.add(x_val[i] == x_val[j] + l_actual[j]).OnlyEnforceIf(yij)\n","\n","        model.AddBoolOr([xji, yji, xij, yij])\n","\n","    # Adding no-overlap constraints.\n","    for i in range(n):\n","        for j in range(i + 1, n):\n","            if [i, j] not in adj:\n","                xji = model.NewBoolVar(\"xji\")\n","                yji = model.NewBoolVar(\"yji\")\n","                xij = model.NewBoolVar(\"xij\")\n","                yij = model.NewBoolVar(\"yij\")\n","                model.add(x_val[j] >= x_val[i] + l_actual[i]).OnlyEnforceIf(xji)\n","                model.add(y_val[j] >= y_val[i] + w_actual[i]).OnlyEnforceIf(yji)\n","                model.add(x_val[i] >= x_val[j] + l_actual[j]).OnlyEnforceIf(xij)\n","                model.add(y_val[i] >= y_val[j] + w_actual[j]).OnlyEnforceIf(yij)\n","                model.AddBoolOr([xji, yji, xij, yij])\n","\n","    # Adding an objective function as well.\n","    # model.Minimize(x_max + y_max)\n","\n","    # Create a solver and solve the model.\n","    solver = cp_model.CpSolver()\n","    status = solver.solve(model)\n","\n","    final_x, final_y, final_pos = [], [], []\n","\n","    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n","        for entry in x_val:\n","            final_x.append(solver.value(entry))\n","        for entry in y_val:\n","            final_y.append(solver.value(entry))\n","    else:\n","        print(\"No solution found.\")\n","\n","    return final_x, final_y, [1] * n"],"metadata":{"id":"0_i0rFIqQ6NV","executionInfo":{"status":"ok","timestamp":1715341050026,"user_tz":-330,"elapsed":723,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["def get_data1():\n","    n, index_mapping, l_val, w_val, adj, anchors, anchors_set = 0, dict(), [], [], [], [], set()\n","    sizes = \"/content/drive/My Drive/raman_solver/raman_solver_final/sizes.txt\"\n","    anch = \"/content/drive/My Drive/raman_solver/raman_solver_final/anchors.txt\"\n","    edges = \"/content/drive/My Drive/raman_solver/raman_solver_final/edges.txt\"\n","    with open(anch, \"r\") as file:\n","        for line in file:\n","            obj = line.strip()\n","            anchors_set.add(obj)\n","    with open(sizes, \"r\") as file:\n","        for line in file:\n","            obj, size = line.strip().split(\",\")\n","            if obj not in index_mapping and obj not in anchors_set:\n","                index_mapping[obj] = n\n","                w_val.append(int(float(size)))\n","                l_val.append(int(float(size)))\n","                n += 1\n","    with open(edges, \"r\") as file:\n","        for line in file:\n","            obj1, obj2 = line.strip().split(\",\")\n","            if obj1 in anchors_set:\n","                anchors.append(index_mapping[obj2])\n","                continue\n","            if  obj2 in anchors_set:\n","                anchors.append(index_mapping[obj1])\n","                continue\n","            idx1, idx2 = index_mapping[obj1], index_mapping[obj2]\n","            if idx1 > idx2:\n","                idx1, idx2 = idx2, idx1\n","            if [idx1, idx2] not in adj:\n","                adj.append([idx1, idx2])\n","    return n, index_mapping, l_val, w_val, adj, anchors"],"metadata":{"id":"DuRnuIq8Eww8","executionInfo":{"status":"ok","timestamp":1715338144775,"user_tz":-330,"elapsed":8,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5veTIBr2ZcZl"},"outputs":[],"source":["n, index_mapping, l_val, w_val, adj, anchors = get_data()\n","final_x, final_y, final_pos = solve_modified(n, adj, l_val, w_val, anchors)"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"7Q81MJjcZf62","colab":{"base_uri":"https://localhost:8080/","height":724},"executionInfo":{"status":"ok","timestamp":1715340724260,"user_tz":-330,"elapsed":1205,"user":{"displayName":"Om Singh","userId":"02223458389634913969"}},"outputId":"289c83e9-c083-4802-d875-cfe9b91b42f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Detailed placement information:\n","R001_0_01: Index: 0, x_coordinate: 2000, y-coordinate: 0\n","OP001: Index: 1, x_coordinate: 6866, y-coordinate: 500\n","R003_0_01: Index: 2, x_coordinate: 1097, y-coordinate: 5345\n","OP002: Index: 3, x_coordinate: 1597, y-coordinate: 5845\n","OP003: Index: 4, x_coordinate: 5963, y-coordinate: 5845\n","OP004: Index: 5, x_coordinate: 430, y-coordinate: 1903\n","R004_0_01: Index: 6, x_coordinate: 7269, y-coordinate: 5345\n","R004_1_01: Index: 7, x_coordinate: 0, y-coordinate: 1403\n","R004_1_02: Index: 8, x_coordinate: 1597, y-coordinate: 5345\n","R005_0_01: Index: 9, x_coordinate: 3872, y-coordinate: 5845\n","OP005: Index: 10, x_coordinate: 4372, y-coordinate: 5845\n","R005_0_02: Index: 11, x_coordinate: 0, y-coordinate: 5345\n","R006_0_01: Index: 12, x_coordinate: 5963, y-coordinate: 7217\n","OP006: Index: 13, x_coordinate: 500, y-coordinate: 6120\n","OP001_D: Index: 14, x_coordinate: 2500, y-coordinate: 5845\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["generate_plot(n, final_x, final_y, l_val, w_val, index_mapping)\n","print(\"Detailed placement information:\")\n","for obj in index_mapping:\n","    print(f\"{obj}: Index: {index_mapping[obj]}, x_coordinate: {final_x[index_mapping[obj]]}, y-coordinate: {final_y[index_mapping[obj]]}\")"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNfnxOm9nqIUi5KnrepJ3bF"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}